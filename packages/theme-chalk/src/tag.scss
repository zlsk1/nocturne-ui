@use 'sass:map';

@use 'mixins/mixins' as *;
@use 'mixins/var' as *;
@use 'common/var' as *;

@include b(tag) {
  @include set-component-css-var('tag', $tag);
}

$tag-border-width: 1px;

$tag-icon-span-gap: () !default;
$tag-icon-span-gap: map.merge(
  (
    'large': 8px,
    'default': 6px,
    'small': 4px
  ),
  $tag-icon-span-gap
);

@function returnVarList($var, $type: 'primary') {
  $list: ('fill-color', 'blank');
  @if $var != false {
    $list: ('color', $type, $var);
  }
  @return $list;
}

@mixin genTheme($backgroundColorWeight, $borderColorWeight, $hoverColorWeight) {
  @include css-var-from-global(
    ('tag', 'bg-color'),
    returnVarList($backgroundColorWeight)
  );
  @include css-var-from-global(
    ('tag', 'border-color'),
    returnVarList($borderColorWeight)
  );
  @include css-var-from-global(
    ('tag', 'hover-color'),
    returnVarList($hoverColorWeight)
  );

  @each $type in $types {
    &.#{bem('tag', '', $type)} {
      @include css-var-from-global(
        ('tag', 'bg-color'),
        returnVarList($backgroundColorWeight, $type)
      );
      @include css-var-from-global(
        ('tag', 'border-color'),
        returnVarList($borderColorWeight, $type)
      );
      @include css-var-from-global(
        ('tag', 'hover-color'),
        returnVarList($hoverColorWeight, $type)
      );
    }
  }
}

@include b(tag) {
  @include genTheme('light-9', 'light-7', '');
  @include set-css-var-value('icon-size', 14px);

  $svg-margin-size: 1px;

  display: inline-flex;
  justify-content: center;
  align-items: center;
  vertical-align: middle;
  height: map.get($tag-height, 'default');
  padding: 0 map.get($tag-padding, 'default');
  font-size: getCssVar('tag-font-size');
  line-height: 1;
  background-color: getCssVar('tag-bg-color');
  color: getCssVar('tag-text-color');
  border-width: $tag-border-width;
  border-style: solid;
  border-color: transparent;
  border-radius: getCssVar('tag-border-radius');
  box-sizing: border-box;
  white-space: nowrap;
  user-select: none;

  @each $type in $types {
    &.#{bem('tag', '', $type)} {
      @include css-var-from-global(('tag', 'text-color'), ('color', $type));
    }
  }

  @include when(round) {
    border-radius: getCssVar('tag', 'border-radius-rounded');
  }

  @include e(content) {
    &:has(+ .#{$namespace}-icon) {
      margin-right: 2px;
    }
  }

  @include e(close) {
    flex-shrink: 0;
    height: getCssVar('icon-size');
    width: getCssVar('icon-size');
    font-size: calc(#{getCssVar('icon-size')} - #{$svg-margin-size * 2});
    color: getCssVar('tag', 'text-color');
    transition: opacity 0.3s;
    cursor: pointer;
    &:hover {
      opacity: 0.8;
    }
  }

  @include m(dark) {
    @include genTheme('', '', 'light-3');
    @include css-var-from-global(('tag', 'text-color'), ('color', 'white'));

    @include css-var-from-global(('tag', 'text-color'), ('color', 'white'));
    @each $type in $types {
      &.#{bem('tag', '', $type)} {
        @include css-var-from-global(('tag', 'text-color'), ('color', 'white'));
      }
    }
  }

  @include m(plain) {
    @include genTheme(false, 'light-5', '');
    @include css-var-from-global(('tag', 'bg-color'), ('fill-color', 'blank'));
  }

  @each $size in (large, small) {
    @include m($size) {
      padding: 0 map.get($tag-padding, $size);
      height: map.get($tag-height, $size);

      @include set-css-var-value(
        'icon-size',
        #{map.get($tag-icon-size, $size)}
      );
    }
  }

  @include m(small) {
    .#{$namespace}-icon-close {
      transform: scale(0.8);
    }
  }

  @each $type in $types {
    &.#{bem('tag', '', $type)} {
      @include when(bordered) {
        border-color: getCssVar('tag', 'border-color');
      }
      @include when(checkable) {
        border-color: transparent;
      }
    }
  }
}
