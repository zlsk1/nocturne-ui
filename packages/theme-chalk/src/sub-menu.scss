@use 'common/var' as *;
@use 'mixins/mixins' as *;
@use 'mixins/var' as *;

$sub-selector: #{$namespace}-sub-menu;

@include b(sub-menu) {
  @include set-component-css-var('menu', $menu);
}

@mixin arrow {
  @include e(arrow) {
    position: absolute;
    top: 50%;
    right: 15px;
    font-size: 16px;
    transform: translateY(-50%);
    > svg {
      transition: transform getCssVar('transition-duration');
    }
  }
}

@include b(sub-menu) {
  @include m(container) {
    box-sizing: border-box;
    margin: getCssVar('menu', 'item-margin');

    @include when(disabled) {
      .#{$sub-selector}--title {
        color: getCssVar('text-color-disabled');
        background: none;
        cursor: not-allowed;

        &:hover {
          color: getCssVar('text-color-disabled');
          background: none;
        }
      }
    }

    @include arrow;

    &::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 1px;
      opacity: 0;
      background: getCssVar('color-primary');
      transition: opacity getCssVar('transition-duration-fast') ease-in-out;
    }
  }

  @include m(title) {
    position: relative;
    box-sizing: border-box;
    display: flex;
    align-items: center;
    justify-content: start;
    height: getCssVar('menu', 'title-height');
    white-space: nowrap;
    border-radius: getCssVar('border-radius-base');
    transition:
      background getCssVar('transition-duration'),
      color getCssVar('transition-duration'),
      padding getCssVar('transition-duration-fast');
    cursor: pointer;

    &:hover:not(.is-selected) {
      color: getCssVar('menu', 'text-color');
      background: getCssVar('fill-color-dark');
    }

    &:active {
      color: getCssVar('menu', 'selected-color');
      background: getCssVar('menu', 'selected-bg');
    }

    @include when(collapse) {
      > span {
        width: 0;
        height: 0;
        overflow: hidden;
        opacity: 0;
      }
    }

    @include when(selected) {
      color: getCssVar('menu', 'selected-color');
    }
  }

  @include m(title-label) {
    opacity: 1;
    transition: opacity getCssVar('transition-duration-fast');

    > span {
      margin-left: 6px;
    }

    .#{$namespace}-icon {
      font-size: getCssVar('menu-icon-size');
      transition: font-size getCssVar('transition-duration');
    }

    @include when(collapse) {
      .#{$namespace}-icon {
        font-size: getCssVar('menu-collapse-icon-size');
      }
    }
  }

  @include arrow;

  @include m(title-icon) {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    vertical-align: middle;

    &:only-child {
      flex: 1;
    }
  }
}

.#{$namespace}-popper.#{$namespace}-sub-menu--popper {
  padding: 0 2px !important;
  font-size: 14px;
  border-radius: getCssVar('border-radius-large');
  user-select: none;
  @include set-component-css-var('menu', $menu);

  .#{$sub-selector}--title {
    padding: getCssVar('menu', 'item-padding');
  }

  ul {
    margin: 0;
    padding-left: 0;
  }

  ul,
  li {
    list-style: none;
  }
}
