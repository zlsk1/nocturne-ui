@use 'sass:map';

@use 'mixins/mixins' as *;
@use 'mixins/var' as *;
@use 'common/var' as *;
@use 'common/transition' as *;

$placement: (
  'bottom': 'top',
  'top': 'bottom',
  'right': 'left',
  'left': 'right'
);

@include b(popper) {
  @include set-component-css-var('popper', $popper);
}

@include b(popper) {
  position: absolute;
  padding: 6px 10px;
  line-height: 20px;
  font-size: getCssVar('font-size-extra-small');
  word-break: break-all;
  visibility: visible;
  border-radius: getCssVar('border-radius-base');
  z-index: 2000;
  background: getCssVar('bg-color', 'overlay');
  border-width: 1px;
  border-style: solid;
  border-color: getCssVar('border-color', 'light');
  box-shadow: getCssVar('box-shadow-light');

  @include when(pure) {
    padding: 0;
  }

  @include when(borderless) {
    border-width: 0;

    @include e(arrow) {
      &::after {
        border-width: 0;
      }
    }
  }

  @include e(arrow) {
    position: absolute;
    width: 10px;
    height: 10px;
    z-index: -1;

    &::after {
      content: '';
      position: absolute;
      left: 0;
      right: 0;
      width: 10px;
      height: 10px;
      background: getCssVar('bg-color', 'overlay');
      border-width: 1px;
      border-style: solid;
      border-color: getCssVar('border-color', 'light');
      box-sizing: border-box;
      transform: rotate(45deg);
      z-index: -1;
    }
  }

  @each $placement,
    $adjacency
      in ('top': 'left', 'bottom': 'right', 'left': 'bottom', 'right': 'top')
  {
    &[data-popper-placement^='#{$placement}'] {
      .#{$namespace}-popper__arrow::after {
        border-#{$placement}-color: transparent !important;
        border-#{$adjacency}-color: transparent !important;
      }
    }
  }

  @each $opposite, $val in $placement {
    &[data-popper-placement^='#{$opposite}'] > .#{$namespace}-popper__arrow {
      #{$val}: -5px;

      &::after {
        @if $opposite == top {
          border-bottom-right-radius: 2px;
        }
        @if $opposite == bottom {
          border-top-left-radius: 2px;
        }
        @if $opposite == left {
          border-top-right-radius: 2px;
        }
        @if $opposite == right {
          border-bottom-left-radius: 2px;
        }
      }
    }
  }

  @include when(dark) {
    color: getCssVar('bg-color');
    background: getCssVar('text-color', 'primary');
    border-color: getCssVar('text-color', 'primary');
    box-shadow: getCssVar('box-shadow-dark');

    @include e(arrow) {
      &::after {
        border-color: getCssVar('text-color', 'primary');
        background: getCssVar('text-color', 'primary');
        right: 0;
      }
    }
  }
}
