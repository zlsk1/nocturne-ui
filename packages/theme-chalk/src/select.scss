@use 'sass:map';

@use 'mixins/mixins' as *;
@use 'mixins/var' as *;
@use 'mixins/function' as *;
@use 'common/var' as *;

$select-size: () !default;
$select-size: map.merge(
  (
    'large': (
      'height': 36px,
      'font-size': 14px,
      'padding': 1px 14px
    ),
    'default': (
      'height': 28px,
      'font-size': 13px,
      'padding': 1px 10px
    ),
    'small': (
      'height': 24px,
      'font-size': 12px,
      'padding': 1px 6px
    )
  ),
  $select-size
);

@mixin tags {
  @include e(tag) {
    box-sizing: border-box;
    position: relative;
    flex: none;
    max-width: 100%;
    margin: 1px 4px 1px 0;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    cursor: initial;

    .#{$namespace}-tag__content {
      box-sizing: border-box;
      display: inline-block;
      max-width: 100%;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: pre;
    }
  }
}

@include b(select) {
  @include set-component-css-var('select', $select);
}

@include b(select) {
  min-height: map.get($select-size, 'default', 'height');
  font-size: 14px;
  cursor: pointer;

  @include when(disabled) {
    color: getCssVar('select', 'disabled-text-color');
    background: getCssVar('select', 'disabled-bg-color');
    user-select: none;
    cursor: not-allowed !important;

    @include e(wrapper) {
      color: getCssVar('disabled-text-color');
      &:hover {
        border: 1px solid getCssVar('select', 'border');
      }
    }

    @include e(value) {
      color: getCssVar('select', 'disabled-text-color');
    }

    @include e(suffix--icon) {
      color: getCssVar('select', 'disabled-text-color');
      cursor: not-allowed;
      &:hover {
        color: getCssVar('select', 'disabled-text-color');
      }
    }

    @include e(prefix) {
      color: getCssVar('select', 'disabled-text-color');
    }

    @include e(tag) {
      cursor: not-allowed;
    }

    @include e(input) {
      cursor: not-allowed !important;
    }
  }

  @include e(wrapper) {
    box-sizing: border-box;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: space-between;
    min-height: map.get($select-size, 'default', 'height');
    padding: map.get($select-size, 'default', 'padding');
    border-radius: getCssVar('select', 'radius');
    border: 1px solid getCssVar('select', 'border');
    word-break: break-all;
    color: getCssVar('text-color-regular');
    transition: all getCssVar('transition-duration') linear;

    &:hover {
      border: 1px solid getCssVar('select', 'hover-border');
    }
  }

  @include when(focus) {
    @include e(wrapper) {
      outline: none;
      border: 1px solid getCssVar('select', 'focus-border');
    }
  }

  @include e(content) {
    position: relative;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    flex: 1;
    min-width: 0;
    min-height: map.get($select-size, 'default', 'height');
    padding-right: 18px;
  }

  @include m(selector) {
    box-sizing: border-box;
    display: flex;
    min-width: 0;
  }

  @include m(selector-wrapper) {
    display: flex;
    min-width: 0;
  }

  @include m(selector-overflow) {
    flex: none;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    max-width: 100%;
  }

  @include e(input--wrapper) {
    display: flex;
    flex: none;
    max-width: 100%;
    user-select: none;
  }

  @include tags;

  @include e(input) {
    position: absolute;
    inset: 0;
    max-width: 100%;
    padding: 0;
    color: getCssVar('select', 'input-color');
    font-family: inherit;
    border: none;
    outline: none;
    appearance: none;
    background-color: transparent;
    cursor: pointer;

    @include when(disabled) {
      cursor: not-allowed;
    }
  }

  @include e(input-text) {
    position: absolute;
    top: 50%;
    z-index: 100;
    white-space: pre;
    visibility: hidden;
    transform: translateY(-50%);
  }

  @include m(value) {
    position: relative;
    display: block;
    max-width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    user-select: none;
    transition: color 0.2s ease-in-out;

    @include when(placeholder) {
      position: absolute;
      color: getCssVar('select', 'placeholder-color');
    }
  }

  @include when(selecting) {
    .#{$namespace}-select--value {
      color: getCssVar('select', 'placeholder-color');
    }
  }

  @include when(filterable) {
    cursor: text;

    @include e(input) {
      position: absolute;
      inset: 0;
      cursor: text;
    }

    .#{$namespace}-select--loading {
      cursor: text;
    }
  }

  @include when(multiple) {
    @include e(input) {
      position: initial;
      cursor: text;
    }
  }

  @include e(suffix--icon) {
    position: absolute;
    right: 12px;
    font-size: 14px;
    color: getCssVar('text-color-placeholder');
    transition: all getCssVar('transition-duration') ease-in-out;
    user-select: none;
    pointer-events: none;
    z-index: 10;
  }

  @include m(close) {
    cursor: pointer;
    pointer-events: auto !important;
    &:hover {
      color: getCssVar('text-color-secondary');
    }
  }

  @each $size in (large, small) {
    @include m($size) {
      @include set-css-var-value(
        ('select', 'height'),
        map.get($select-size, $size, 'height')
      );
      @include set-css-var-value(
        ('select', 'font-size'),
        map.get($select-size, $size, 'font-size')
      );
      @include set-css-var-value(
        ('select', 'padding'),
        map.get($select-size, $size, 'padding')
      );

      @include e(wrapper) {
        min-height: getCssVar('select', 'height');
        padding: getCssVar('select', 'padding');
        font-size: getCssVar('select', 'font-size');
      }
    }
  }

  @include when(selected) {
    color: getCssVar('select', 'selected-color');
  }

  @include e(prefix) {
    display: flex;
    margin-right: 6px;
  }

  @include m(loading) {
    animation: rotate 1s linear infinite;
    @keyframes rotate {
      from {
        transform: rotate(0deg);
      }
      to {
        transform: rotate(360deg);
      }
    }
  }
}

.#{$namespace}-select__popper {
  @include css-var-from-global(
    ('select-popper-empty-color'),
    ('color-info-light-5')
  );
  font-size: 14px;
  border-radius: getCssVar('border-radius-large');

  .#{$namespace}-select--empty {
    display: block;
    padding: 14px 0;
    text-align: center;
    color: getCssVar('select-popper-empty-color');

    &-icon {
      margin-bottom: 4px;
    }
  }
}

.#{$namespace}-select--tags__popper {
  max-width: 400px;

  @include tags;
}
