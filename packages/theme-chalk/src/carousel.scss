@use 'sass:map';

@use 'common/var' as *;
@use 'mixins/function' as *;
@use 'mixins/mixins' as *;
@use 'mixins/var' as *;

$placements: () !default;
$placements: map.merge(
  (
    'bottom': (
      bottom: 3%,
      left: 50%,
      transform: translateX(-50%)
    ),
    'top': (
      top: 3%,
      left: 50%,
      transform: translateX(-50%)
    ),
    'left': (
      left: 3%,
      top: 50%,
      transform: translateY(-50%)
    ),
    'right': (
      right: 3%,
      top: 50%,
      transform: translateY(-50%)
    )
  ),
  $placements
);

@include b(carousel) {
  @include set-component-css-var('carousel', $carousel);
}

@include b(carousel) {
  position: relative;
  overflow: hidden;

  ul,
  li {
    list-style: none;
    margin: 0;
  }

  button {
    outline: none;
    border: none;
  }

  @include e(indicator) {
    position: absolute;
    padding-left: 0;
  }

  @each $placement in (bottom, top, left, right) {
    .#{$namespace}-carousel__indicator--#{$placement} {
      @if $placement == bottom or $placement == top {
        display: flex;
        transform: map.get($placements, $placement, transform);
        left: map.get($placements, $placement, left);

        @if $placement == bottom {
          bottom: map.get($placements, $placement, bottom);
        } @else {
          top: map.get($placements, $placement, top);
        }
      } @else if $placement == left or $placement == right {
        top: map.get($placements, $placement, top);
        transform: map.get($placements, $placement, transform);

        @include e(indicator__item) {
          button {
            width: map.get($carousel-indicator-size, 'vertical', 'width');
            height: map.get($carousel-indicator-size, 'vertical', 'height');
            padding: 0;
          }
        }
        @if $placement == left {
          left: map.get($placements, $placement, right);
        } @else if $placement == right {
          right: map.get($placements, $placement, right);
        }
      }
    }
  }

  @include e(indicator__item) {
    padding: getCssVar('carousel', 'indicator-item-padding');
    cursor: pointer;

    button {
      display: block;
      width: map.get($carousel-indicator-size, 'horizontal', 'width');
      height: map.get($carousel-indicator-size, 'horizontal', 'height');
      background-color: getCssVar('carousel', 'indicator-bg');
      transition: all getCssVar('transition-duration-fast');
      cursor: pointer;

      @include when(circle) {
        width: map.get($carousel-indicator-size, 'circle', 'width');
        height: map.get($carousel-indicator-size, 'circle', 'height');
        border-radius: 50%;
      }

      @include when(active) {
        background-color: $color-white;
      }
    }

    &:hover button:not(.is-active) {
      background-color: getCssVar('carousel', 'indicator-hover-bg');
    }
  }

  @include e(content) {
    position: relative;
    overflow: hidden;
  }

  @include e(content__item) {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;

    @include when(animation) {
      transition: getCssVar('carousel', 'item-transition');
    }
  }

  @include e(button) {
    position: absolute;
    top: 50%;
    padding: 6px;
    text-align: center;
    font-size: getCssVar('carousel-button-size');
    line-height: getCssVar('carousel-button-size');
    color: getCssVar('carousel', 'button-color');
    border-radius: 50%;
    background: transparent;
    transform: translateY(-50%);
    transition:
      opacity getCssVar('transition-duration'),
      color getCssVar('transition-duration') ease-in-out;
    cursor: pointer;
    z-index: 10;

    &:hover {
      color: getCssVar('carousel', 'button-hover');
    }

    @include m(left) {
      left: 1%;
    }

    @include m(right) {
      right: 1%;
    }
  }
}
